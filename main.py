import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import os
import json
import csv
import random

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
names_old = []
first_turn = True  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞—Ö
def log_user_interaction(user_id, user_name, username, message_text):
    file_exists = os.path.isfile('user_logs.csv')
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è

    with open('user_logs.csv', mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        if not file_exists:
            writer.writerow(['User ID', 'Name', 'Username', 'Message', 'Date and Time'])
        writer.writerow([user_id, user_name, username, message_text, current_time])

# –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
with open('cities_ua.json', 'r') as f:
    data = json.load(f)

names1 = [city['name'] for city in data['city']]

def read_file(file_name):
    with open(file_name, 'r') as file:
        return file.read()

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
TOKEN = read_file('token.txt')
bot = telebot.TeleBot(TOKEN)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
button = KeyboardButton('üîÑ –°–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ')
button1 = KeyboardButton('üí° –ü—ñ–¥–∫–∞–∑–∫–∞')
keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(button, button1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
def reset():
    global names_old, first_turn
    names_old = []
    first_turn = True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    reset()
    user = message.from_user
    username = user.username if user.username else '–ù–µ –≤–∫–∞–∑–∞–Ω'
    log_user_interaction(user.id, user.first_name, username, '/start')  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    bot.reply_to(message, "–í—ñ—Ç–∞—é!\n–Ø –±–æ—Ç, —è–∫–∏–π –ø–æ–≥—Ä–∞—î –∑ —Ç–æ–±–æ—é —É –º—ñ—Å—Ç–∞.\n–ó —Ç–µ–±–µ –ø–µ—Ä—à–µ –º—ñ—Å—Ç–æ: –ü–æ—ó—Ö–∞–ª–∏...")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_message(message):
    global first_turn, names_old

    names = names1.copy()
    random.shuffle(names)

    word = str(message.text)
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    username = message.from_user.username if message.from_user.username else '–ù–µ –≤–∫–∞–∑–∞–Ω'

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_user_interaction(user_id, user_name, username, word)



    if word[0].islower():
        word = word.capitalize()
    stripped_word = word.rstrip(',. ')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏
    allowed_characters = ' –∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è–ê–ë–í–ì“ê–î–ï–Ñ–ñ–ó–ò–Ü–á–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–¨–Æ–Ø\'-'

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    allowed_characters += 'üí°üîÑ'

    if not all(char in allowed_characters for char in stripped_word):
        bot.reply_to(message, "–¢–∏ –≤–∑–∞–≥–∞–ª—ñ –Ω–∞ —è–∫—ñ–π –º–æ–≤—ñ —Ä–æ–∑–º–æ–≤–ª—è—î—à? –ü–∏—à–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é!", reply_markup=keyboard)
        return

    # –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞
    if first_turn:
        if word == 'üîÑ –°–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ':
            reset()
            bot.reply_to(message, "Ok, –¥–∞–≤–∞–π —Å–ø–æ—á–∞—Ç–∫—É)\n–ü–∏—à–∏ –º—ñ—Å—Ç–æ:", reply_markup=keyboard)
            return

        if word == 'üí° –ü—ñ–¥–∫–∞–∑–∫–∞':
            bot.reply_to(message, "–ù–∞–ø–∏—à–∏ —è–∫–µ-–Ω–µ–±—É–¥—å –º—ñ—Å—Ç–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é", reply_markup=keyboard)
            return
        if stripped_word in names:
            names_old.append(stripped_word)
            if stripped_word[-1] in '—å“ëjar–∏udkbgl)s':
                last_letter = stripped_word[-2]
            else:
                last_letter = stripped_word[-1]
            i = 0

            while i < len(names):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤
                if names[i][0] == last_letter.upper():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≥–æ—Ä–æ–¥–∞
                    bot.reply_to(message, names[i], reply_markup=keyboard)
                    names_old.append(names[i])
                    first_turn = False
                    break  # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                i += 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≥–æ—Ä–æ–¥—É

            # for name in names:
            #     bot.reply_to(message, name, reply_markup=keyboard)
            #     names_old.append(name)
            #     first_turn = False
            #     return
        else:
            bot.reply_to(message, f"–î—ñ—Ç—å–∫–∞ –ª–∏—Å–æ–≥–æ –∞ –Ω–µ {stripped_word} –¥–∞–≤–∞–π —â–æ—Å—å —Ä–µ–∞–ª—å–Ω–µ", reply_markup=keyboard)
            return
    else:

        last_letter = names_old[-1][-1]
        if last_letter in '—å“ëjar–∏udkbgl)s':
            last_letter = names_old[-1][-2]

        if word == 'üîÑ –°–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ':
            reset()
            bot.reply_to(message, "Ok, –¥–∞–≤–∞–π —Å–ø–æ—á–∞—Ç–∫—É)\n–ü–∏—à–∏ –º—ñ—Å—Ç–æ:", reply_markup=keyboard)
            return

        if word == 'üí° –ü—ñ–¥–∫–∞–∑–∫–∞':
            if last_letter in '—å“ëjaru–∏dkbgl)s':
                last_letter = stripped_word[-2]
                for name in names:
                    if name not in names_old and name.startswith(last_letter.upper()):
                        bot.reply_to(message, name, reply_markup=keyboard)
                        return
            else:
                for name in names:
                    if name not in names_old and name.startswith(last_letter.upper()):
                        bot.reply_to(message, name, reply_markup=keyboard)
                        return

        if stripped_word in names_old:
            bot.reply_to(message, f"–¢–∏ —Ö–æ—á–µ—à –Ω–∞–º–∞—Ö–∞—Ç–∏ –º–µ–Ω–µ, –º—ñ—Å—Ç–æ {stripped_word} –≤–∂–µ –±—É–ª–æ, –Ω–∞–ø–∏—à–∏ —ñ–Ω—à–µ –Ω–∞ –±—É–∫–≤—É '{last_letter.upper()}'", reply_markup=keyboard)
            return

        if stripped_word.startswith(last_letter.upper()):
            if stripped_word in names and stripped_word not in names_old:
                names_old.append(stripped_word)
                last_letter = stripped_word[-1]
                if last_letter in '—å“ëjar–∏udkbgl)s':
                    last_letter = stripped_word[-2]
                for name in names:
                    if name not in names_old and name.startswith(last_letter.upper()):
                        bot.reply_to(message, name, reply_markup=keyboard)
                        names_old.append(name)
                        return
            else:
                if stripped_word in names_old:
                    bot.reply_to(message, f"–¢–∏ —Ö–æ—á–µ—à –Ω–∞–º–∞—Ö–∞—Ç–∏ –º–µ–Ω–µ, –º—ñ—Å—Ç–æ {stripped_word} –≤–∂–µ –±—É–ª–æ, –Ω–∞–ø–∏—à–∏ —ñ–Ω—à–µ –Ω–∞ –±—É–∫–≤—É '{last_letter.upper()}'", reply_markup=keyboard)
                    return
                if stripped_word not in names:
                    bot.reply_to(message, f"–î—ñ—Ç—å–∫–∞ –ª–∏—Å–æ–≥–æ –∞ –Ω–µ {stripped_word} –¥–∞–≤–∞–π —â–æ—Å—å —Ä–µ–∞–ª—å–Ω–µ", reply_markup=keyboard)
                    return
        else:
            bot.reply_to(message, f"–©–æ —Ç–∏ —Ç–∞–º —Ç–∏—Ü—è—î—à? –ü–∏—à–∏ –º—ñ—Å—Ç–æ –Ω–∞ –±—É–∫–≤—É '{last_letter.upper()}'", reply_markup=keyboard)

bot.infinity_polling()
